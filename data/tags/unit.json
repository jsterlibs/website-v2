[{"title":"YUI Test","url":"/library/yui-test","id":"yui-test","library":{"id":"yui-test","description":"YUI Test is a testing framework for browser-based JavaScript solutions. Using YUI Test, you can easily add unit testing to your JavaScript solutions. While not a direct port from any specific xUnit framework, YUI Test does derive some characteristics from nUnit and JUnit.","logo":"https://ebmedia.eventbrite.com/s3-s3/eventlogos/2254509/828699663-2.jpg","name":"YUI Test","links":{"site":"https://yuilibrary.com/yui/docs/test/","github":"https://github.com/yui/yuitest"},"tags":["unit"]}},{"title":"JsUnitTest","url":"/library/jsunittest","id":"jsunittest","library":{"id":"jsunittest","description":"This JavaScript project provides a one-file JavaScript test suite.\n\nThis is based off unittest.js from \"prototypejs\":http://prototypejs.org, \nexcept this library has no dependency on prototype.js so there is no \nchance your code-under-test can conflict with prototype.js or that you might \naccidently use a prototype.js helper for a library that will be deployed \nindependently off prototypejs.","logo":"/images/repo.png","name":"JsUnitTest","links":{"site":"http://jsunittest.rubyforge.org/","github":"https://github.com/drnic/jsunittest/"},"tags":["unit"]}},{"title":"jsUnity","url":"/library/jsunity","id":"jsunity","library":{"id":"jsunity","description":"jsUnity is a lightweight, environment-agnostic JavaScript testing framework: It doesnâ€™t rely on any browser capabilities and therefore can be used in any client-side or server-side JavaScript environment.","logo":"https://viewvc.svn.mozilla.org/vc/projects/openweb/trunk/webroot/thumbs/jsunity.png?revision=30252&view=co&pathrev=30252","name":"jsUnity","links":{"site":"http://jsunity.com/"},"tags":["unit"]}},{"title":"munit.js","url":"/library/munit-js","id":"munit-js","library":{"id":"munit-js","description":"Microunit testing for javascript","logo":"/images/repo.png","name":"munit.js","links":{"github":"https://github.com/sole/munit.js"},"tags":["unit"]}},{"title":"FuncUnit","url":"/library/funcunit","id":"funcunit","library":{"id":"funcunit","description":"FuncUnit is a free, open source, web application testing framework that focuses on making tests fun and enjoyable.","logo":"https://avatars0.githubusercontent.com/u/2782656?v=3","name":"FuncUnit","links":{"site":"http://javascriptmvc.com","github":"https://github.com/jupiterjs/funcunit"},"tags":["unit"]}},{"title":"bunit.js ","url":"/library/bunit-js","id":"bunit-js","library":{"id":"bunit-js","description":"bunit.js provides a simple way to define unit tests and run them using a web page. In order to use it, you'll likely want to do something like this:\n\nDefine your tests (ie. tests/assert.js) using bunit and bunit.assert.\nImport your tests and bunit at your test main (ie. main.js).\nExecute your tests using bunit. It discovers the tests automatically as long as you import them via main somehow.","logo":"/images/repo.png","name":"bunit.js ","links":{"github":"https://github.com/bebraw/bunit.js"},"tags":["unit"]}},{"title":"JasUnit","url":"/library/jasunit","id":"jasunit","library":{"id":"jasunit","description":"JasUnit is a slim unit testing framework for JavaScript, following the general design principles of xUnit.\n\nFor testing your code, JasUnit allows you to:\n\nCreate test fixtures with any number of test methods\nImplement setup() and teardown() methods which are run before and after each test\nSpecify a namespace for a fixture for easy organisation of tests\nUse the default or custom logger (default appends results to a given element)\nUse assertions from any scope - this isn't necessary or even really advised, but some people prefer it.","logo":"/images/repo.png","name":"JasUnit","links":{"site":"https://code.google.com/p/jasproject/wiki/JasUnit"},"tags":["unit"]}},{"title":"testr.js","url":"/library/testr-js","id":"testr-js","library":{"id":"testr-js","description":"Clean unit testing of Require.js AMD","logo":"/images/repo.png","name":"testr.js","links":{"github":"https://github.com/mattfysh/testr.js"},"tags":["amd","requirejs","unit"]}},{"title":"unit.js","url":"/library/unit-js","id":"unit-js","library":{"id":"unit-js","description":"Unit.js is an unit testing framework for Javascript and Node.js.\n\nSeveral assertions styles (unit.js, should.js, must.js, assert, spec, ...).\n\nUnit.js is capable of testing the Node.js modules, Express.js applications, requests and it provides the great features (spies, stubs, mocks, ...). \n\nWorks standalone or with any unit testing framework (Mocha, Jasmine, ...).\n\nAll assertions are documented and and have examples.","logo":"http://unitjs.com/assets/img/unitjs.png","name":"unit.js","links":{"site":"http://unitjs.com","github":"https://github.com/unitjs/unit.js"},"tags":["mock","node.js","spy","stub","test","unit"]}},{"title":"JUTE","url":"/library/jute","id":"jute","library":{"id":"jute","description":"Javascript Unit Testing Environment (JUTE)\nJUTE is a standalone HTTP server that serves your test files to a JUTE backend for testing. Three of the four backends (Selenium, Capture, and PhantomJS) serve files to a browser, the third backend (V8) will run your tests directly in V8. JUTE then collects and stores test output in JUnit XML format and code coverage information in 'lcov' format and generates pretty HTML to view your coverage results.","logo":"/images/repo.png","name":"JUTE","links":{"github":"https://github.com/zzo/JUTE"},"tags":["unit"]}},{"title":"math.js","url":"/library/math-js","id":"math-js","library":{"id":"math-js","description":"Math.js is an extensive math library for JavaScript and Node.js. It features a flexible expression parser and offers an integrated solution to work with numbers, big numbers, complex numbers, units, and matrices.","logo":"http://mathjs.org/css/img/mathjs_330x100.png","name":"math.js","links":{"site":"http://mathjs.org","github":"https://github.com/josdejong/mathjs"},"tags":["bignumber","complex","expressions","math","matrix","unit"]}},{"title":"QUnit","url":"/library/qunit","id":"qunit","library":{"id":"qunit","description":"QUnit is a powerful, easy-to-use, JavaScript test suite. It's used by the jQuery project to test its code and plugins but is capable of testing any generic JavaScript code (and even capable of testing JavaScript code on the server-side).\n\nQUnit is especially useful for regression testing: Whenever a bug is reported, write a test that asserts the existence of that particular bug. Then fix it and commit both. Every time you work on the code again, run the tests. If the bug comes up again - a regression - you'll spot it immediately and know how to fix it, because you know what code you just changed.","logo":"https://nugetgallery.blob.core.windows.net/icons/NQUnit.1.0.4.png","name":"QUnit","links":{"site":"https://qunitjs.com","github":"https://github.com/jquery/qunit"},"tags":["unit"]}},{"title":"JsUnit","url":"/library/jsunit","id":"jsunit","library":{"id":"jsunit","description":"JsUnit is a Unit Testing framework for client-side (in-browser) JavaScript. It is essentially a port of JUnit to JavaScript. Also included is a platform for automating the execution of tests on multiple browsers and mutiple machines running different OSs.","logo":"http://www.jsunit.net/logos/logo_jsunit.gif","name":"JsUnit","links":{"github":"https://github.com/pivotal/jsunit"},"tags":["unit"]}},{"title":"Bunyip","url":"/library/bunyip","id":"bunyip","library":{"id":"bunyip","description":"Automate client-side unit testing in real browsers using the CLI","logo":"/images/repo.png","name":"Bunyip","links":{"site":"https://ryanseddon.github.com/bunyip/","github":"https://github.com/ryanseddon/bunyip"},"tags":["unit"]}},{"title":"J3Unit","url":"/library/j3unit","id":"j3unit","library":{"id":"j3unit","description":"J3Unit is an object-oriented unit testing framework for JavaScript. J3Unit runs JavaScript tests directly in the web browser and can be automated using JUnit and Jetty. J3Unit builds on previous work by JSUnit and Script.aculo.us to provide a better way to automate JavaScript unit tests. Object-oriented JavaScript unit tests are written using the Script.aculo.us Test.Unit.Runner object, which is in turn built upon the prototype JavaScript library.","logo":"http://j3unit.sourceforge.net/j3unit.jpg","name":"J3Unit","links":{"site":"http://j3unit.sourceforge.net/"},"tags":["unit"]}},{"title":"Tree","url":"/library/tree","id":"tree","library":{"id":"tree","description":"Tree.js, the Javascript Unit testing framework. (Some say it's the best one around.)\n\nTrust: It's an unittested unit testing framework. You can check out the tests in the test folder, and run them if you will. If you still manage to find a bug in spite all this effort, I'd love to pull your proposed test cases/asserts maybe along with the fixed code itself.","logo":"/images/repo.png","name":"Tree","links":{"site":"https://github.com/Wizek/Tree#readme","github":"https://github.com/Wizek/Tree"},"tags":["unit"]}}]