[{"title":"Saga","url":"/library/saga","id":"saga","library":{"id":"saga","description":"Better code coverage tool for JavaScript","logo":"/images/repo.png","name":"Saga","links":{"site":"https://timurstrekalov.github.com/saga/","github":"https://github.com/timurstrekalov/saga"},"tags":["coverage"]}},{"title":"Istanbul","url":"/library/istanbul","id":"istanbul","library":{"id":"istanbul","description":"JS code coverage tool written in JS. All-javascript instrumentation library that tracks statement, branch, and function coverage and reverse-engineers line coverage with 100% fidelity. Module loader hooks to instrument code on the fly. Command line tools to run node unit tests \"with coverage turned on\" and no cooperation whatsoever from the test runner\nHTML and LCOV reporting.","logo":"/images/repo.png","name":"Istanbul","links":{"github":"https://github.com/gotwarlost/istanbul"},"tags":["coverage"]}},{"title":"ScriptCover ","url":"/library/scriptcover","id":"scriptcover","library":{"id":"scriptcover","description":"ScriptCover is a javascript coverage analysis tool. It is a Chrome extension that provides line-by-line Javascript code coverage statistics for web pages in real time without any user modifications required. The results are collected both when the page loads and as users interact with it. The tool reports details about total web page coverage and for each external/internal script, as well as annotated code sources with individually highlighted executed lines.","logo":"/images/repo.png","name":"ScriptCover ","links":{"site":"https://googletesting.blogspot.com/2011/10/scriptcover-makes-javascript-coverage.html"},"tags":["chrome","coverage"]}},{"title":"JesCov","url":"/library/jescov","id":"jescov","library":{"id":"jescov","description":"JesCov is an open source tool for measuring code coverage of JavaScript. It makes it possible to find out both line and branch coverage from any ES3-compliant source code. It is not tied to any particular testing framework, but the only current integration point is for Jasmine. The general approach is based on a JSON data interchange format, which means some of the reporting tools could potentially be used against data collected in some other way than running the core JesCov project.","logo":"https://0.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"JesCov","links":{"site":"http://jescov.olabini.com","github":"https://github.com/jescov/jescov"},"tags":["coverage"]}},{"title":"JSCoverage","url":"/library/jscoverage","id":"jscoverage","library":{"id":"jscoverage","description":"JSCoverage is a tool that measures code coverage for JavaScript programs.","logo":"/images/repo.png","name":"JSCoverage","links":{"site":"http://siliconforks.com/jscoverage/"},"tags":["coverage"]}},{"title":"JCov","url":"/library/jcov","id":"jcov","library":{"id":"jcov","description":"Coverage reports on your Javascript tests! Supports: Jasmine, JSpec or any other Javascript with a custom runner file.","logo":"https://0.gravatar.com/avatar/f7faac7d5decc47f40fa66c2a7a97274?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"JCov","links":{"site":"https://yp-engineering.github.com/jcov/","github":"https://github.com/yp-engineering/jcov"},"tags":["coverage"]}}]