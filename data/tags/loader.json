[{"title":"Frame.js","url":"/library/frame-js","id":"frame-js","library":{"id":"frame-js","description":"Frame.js is a flow control library and script loader for Javascript applications.\n\nFrame includes and acts as an interface for the LABjs library loader. So you can use Frame to load script libraries from both local and remote servers, cross-browser, with no cross-site scripting restrictions.\n\nWhile many function sequencers exist, Frame.js focuses on application-level synchronous function management, includes a library loader to mix-and-match between remote scripts, local scripts, and functions, and provides a basic set of debugging and unit testing tools.\n\nFrame is like require.js, but designed for the frontend, with debugging tools, and it clocks in at just under 11k (compared to require.js's minified 25k).","logo":"/images/repo.png","name":"Frame.js","links":{"site":"http://framejs.tumblr.com","github":"https://github.com/bishopZ/Frame.js"},"tags":["application","async","boot","job","library","loader","loading","manager"]}},{"title":"wjs","url":"/library/wjs","id":"wjs","library":{"id":"wjs","description":"A Javascript / PHP library to manage packaging elements from server side to client side.","logo":"http://wjs.wexample.com/logo.jpg","name":"wjs","links":{"site":"http://wjs.wexample.com/?DemoPage[0]=Home","github":"https://github.com/weeger/wjs"},"tags":["ajax","lazy","loader","loading","progressive","remote"]}},{"title":"kmodule","url":"/library/kmodule","id":"kmodule","library":{"id":"kmodule","description":"KModule is a pure and light implemention of CommonJS Modules/AsynchronousDefinition and Modules/LoaderPlugin.","logo":"/images/repo.png","name":"kmodule","links":{"github":"https://github.com/yessky/kmodule"},"tags":["amd","commonjs","loader"]}},{"title":"RaptorJS","url":"/library/raptorjs","id":"raptorjs","library":{"id":"raptorjs","description":"RaptorJS is an open-source toolkit for building JavaScript modules and UI components that function on the server and in the browser. RaptorJS promotes modularity, which is crucial to building reasonably complex HTML web applications that are maintainable, easily testable, and optimized. The central goal of RaptorJS is to enable applications to provide the best user experience.\n\nAs an eBay project, RaptorJS was designed to be extremely efficient and lightweight. Rather than being a monolithic framework, RaptorJS embraces a modular design; it is intended to work alongside existing JavaScript librariesâ€”not replace them.","logo":"https://raw.github.com/raptorjs/branding/master/raptorjs-logo-square.png","name":"RaptorJS","links":{"github":"https://github.com/raptorjs/raptorjs"},"tags":["Node","amd","component","loader","templating","toolkit","ui","widget"]}}]