[{"title":"Jasmine","url":"/library/jasmine","id":"jasmine","library":{"id":"jasmine","description":"Jasmine is a behavior-driven development framework for testing JavaScript code. It does not depend on any other JavaScript frameworks. It does not require a DOM. And it has a clean, obvious syntax so that you can easily write tests.","logo":"https://pivotal.github.com/jasmine/images/jasmine_logo.png","name":"Jasmine","links":{"site":"https://pivotal.github.com/jasmine/","github":"https://github.com/pivotal/jasmine"},"tags":["bdd"]}},{"title":"Mocha","url":"/library/mocha","id":"mocha","library":{"id":"mocha","description":"Mocha is a feature-rich JavaScript test framework running on node and the browser, making asynchronous testing simple and fun. Mocha tests run serially, allowing for flexible and accurate reporting, while mapping uncaught exceptions to the correct test cases.","logo":"http://dailyjs.com/images/posts/mocha-tests.png","name":"Mocha","links":{"site":"https://visionmedia.github.com/mocha","github":"https://github.com/visionmedia/mocha"},"tags":[]}},{"title":"Phantomjs","url":"/library/phantomjs","id":"phantomjs","library":{"id":"phantomjs","description":"PhantomJS is a headless WebKit scriptable with a JavaScript API. It has fast and native support for various web standards: DOM handling, CSS selector, JSON, Canvas, and SVG.","logo":"http://phantomjs.org/img/phantomjs-logo.png","name":"Phantomjs","links":{"site":"http://phantomjs.org/","github":"https://github.com/ariya/phantomjs"},"tags":["screenshot","testing"]}},{"title":"jest","url":"/library/jest","id":"jest","library":{"id":"jest","description":"Painless JavaScript Unit Testing\n\n\nFamiliar Approach: Built on top of the Jasmine test framework, using familiar expect(value).toBe(other) assertions\nMock by Default: Automatically mocks CommonJS modules returned by require(), making most existing code testable\nShort Feedback Loop: DOM APIs are mocked and tests run in parallel via a small node.js command line utility\n\n\nGetting Started\n\nCheck out the Getting Started tutorial. It's pretty simple!","logo":"https://avatars.githubusercontent.com/u/69631?v=2","name":"jest","links":{"site":"https://facebook.github.io/jest/","github":"https://github.com/facebook/jest"},"tags":[]}},{"title":"CasperJS","url":"/library/casperjs","id":"casperjs","library":{"id":"casperjs","description":"CasperJS is an open source navigation scripting & testing utility written in Javascript and based on PhantomJS â€” the scriptable headless WebKit engine. It eases the process of defining a full navigation scenario and provides useful high-level functions, methods & syntactic sugar for doing common tasks such as:\n\n\ndefining & ordering browsing navigation steps\nfilling & submitting forms\nclicking & following links\ncapturing screenshots of a page (or part of it)\ntesting remote DOM\nlogging events\ndownloading resources, including binary ones\nwriting functional test suites, saving results as JUnit XML\nscraping Web contents","logo":"http://casperjs.org/images/casperjs-logo-squared.png","name":"CasperJS","links":{"site":"http://casperjs.org/","github":"https://github.com/n1k0/casperjs"},"tags":["headless","phantomjs"]}},{"title":"Zombie.js","url":"/library/zombie-js","id":"zombie-js","library":{"id":"zombie-js","description":"zombie.js(1) -- Insanely fast, headless full-stack testing using Node.js\nIf you're going to write an insanely fast, headless browser, how can you not call it Zombie? Zombie it is.\n\nZombie.js is a lightweight framework for testing client-side JavaScript code in a simulated environment. No browser required.","logo":"https://farm4.static.flickr.com/3482/4011539488_7e36154eda.jpg","name":"Zombie.js","links":{"site":"http://zombie.labnotes.org/","github":"https://github.com/assaf/zombie/"},"tags":["headless","nodejs"]}},{"title":"QUnit","url":"/library/qunit","id":"qunit","library":{"id":"qunit","description":"QUnit is a powerful, easy-to-use, JavaScript test suite. It's used by the jQuery project to test its code and plugins but is capable of testing any generic JavaScript code (and even capable of testing JavaScript code on the server-side).\n\nQUnit is especially useful for regression testing: Whenever a bug is reported, write a test that asserts the existence of that particular bug. Then fix it and commit both. Every time you work on the code again, run the tests. If the bug comes up again - a regression - you'll spot it immediately and know how to fix it, because you know what code you just changed.","logo":"https://nugetgallery.blob.core.windows.net/icons/NQUnit.1.0.4.png","name":"QUnit","links":{"site":"https://qunitjs.com","github":"https://github.com/jquery/qunit"},"tags":["unit"]}},{"title":"Sinon.JS","url":"/library/sinon-js","id":"sinon-js","library":{"id":"sinon-js","description":"Standalone test spies, stubs and mocks for JavaScript.\nNo dependencies, works with any unit testing framework.","logo":"https://avatars0.githubusercontent.com/u/6570253?v=3","name":"Sinon.JS","links":{"site":"http://cjohansen.no/sinon/","github":"https://github.com/cjohansen/Sinon.JS"},"tags":["mock"]}},{"title":"Chai","url":"/library/chai","id":"chai","library":{"id":"chai","description":"Chai is a BDD / TDD assertion library for node and the browser that can be delightfully paired with any javascript testing framework.","logo":"https://a248.e.akamai.net/camo.github.com/6d3c73f6ca1a06a3288638ddb2c2cacd0b7ea224/687474703a2f2f636861696a732e636f6d2f7075626c69632f696d672f636861692d6c6f676f2e706e67","name":"Chai","links":{"site":"http://chaijs.com","github":"https://github.com/chaijs/chai"},"tags":["bdd"]}},{"title":"Karma","url":"/library/karma","id":"karma","library":{"id":"karma","description":"A simple tool that allows you to execute JavaScript code in multiple real browsers, powered by Node.js and Socket.io.","logo":"https://0.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"Karma","links":{"site":"https://karma-runner.github.io","github":"https://github.com/karma-runner/karma"},"tags":["runner"]}},{"title":"should","url":"/library/should","id":"should","library":{"id":"should","description":"should is an expressive, readable, test framework agnostic, assertion library for node.\n\nIt extends the Object prototype with a single non-enumerable getter that allows you to express how that object should behave.","logo":"/images/repo.png","name":"should ","links":{"github":"https://github.com/visionmedia/should.js"},"tags":[]}},{"title":"FuncUnit","url":"/library/funcunit","id":"funcunit","library":{"id":"funcunit","description":"FuncUnit is a free, open source, web application testing framework that focuses on making tests fun and enjoyable.","logo":"https://avatars0.githubusercontent.com/u/2782656?v=3","name":"FuncUnit","links":{"site":"http://javascriptmvc.com","github":"https://github.com/jupiterjs/funcunit"},"tags":["unit"]}},{"title":"Intern","url":"/library/intern","id":"intern","library":{"id":"intern","description":"Intern is a complete test stack for JavaScript designed to help you write and run consistent, high-quality test cases for your JavaScript libraries and applications. It can be used to test any JavaScript code. Its functional testing capabilities can even be used to test non-JavaScript Web sites and apps, if you really want.","logo":"http://theintern.io/css/images/logo.png","name":"Intern","links":{"site":"http://theintern.io","github":"https://github.com/theintern/intern"},"tags":[]}},{"title":"testem","url":"/library/testem","id":"testem","library":{"id":"testem","description":"Unit testing in Javascript can be tedious and painful, but Testem makes it so easy that you will actually want to write tests.","logo":"/images/repo.png","name":"testem","links":{"github":"https://github.com/airportyh/testem"},"tags":[]}},{"title":"Watir","url":"/library/watir","id":"watir","library":{"id":"watir","description":"Watir, pronounced water, is an open-source (BSD) family of Ruby libraries for automating web browsers. It allows you to write tests that are easy to read and maintain. It is simple and flexible.\n\nWatir drives browsers the same way people do. It clicks links, fills in forms, presses buttons. Watir also checks results, such as whether expected text appears on the page.","logo":"https://upload.wikimedia.org/wikipedia/commons/7/7e/Watir.gif","name":"Watir","links":{"site":"http://watir.com","github":"https://github.com/watir/watir"},"tags":["ruby"]}},{"title":"Istanbul","url":"/library/istanbul","id":"istanbul","library":{"id":"istanbul","description":"JS code coverage tool written in JS. All-javascript instrumentation library that tracks statement, branch, and function coverage and reverse-engineers line coverage with 100% fidelity. Module loader hooks to instrument code on the fly. Command line tools to run node unit tests \"with coverage turned on\" and no cooperation whatsoever from the test runner\nHTML and LCOV reporting.","logo":"/images/repo.png","name":"Istanbul","links":{"github":"https://github.com/gotwarlost/istanbul"},"tags":["coverage"]}},{"title":"Buster.JS","url":"/library/buster-js","id":"buster-js","library":{"id":"buster-js","description":"A browser JavaScript testing toolkit. It does browser testing with browser automation (think JsTestDriver), qunit style static html page testing, testing in headless browsers (phantomjs, jsdom, ...), and more.","logo":"http://f.augustl.com/talks/smidig-2011/logo_large.png","name":"Buster.JS","links":{"site":"http://docs.busterjs.org","github":"https://github.com/busterjs/buster"},"tags":[]}},{"title":"yeti","url":"/library/yeti","id":"yeti","library":{"id":"yeti","description":"Yeti automates tests written for various test frameworks. Yeti scales from your dev box (where it works by itself) to your CI system (where it launches browsers with Selenium) without changing your existing tests.","logo":"https://0.gravatar.com/avatar/af34a0de54b2b7a34cc6d7196ef12fc0?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"yeti","links":{"site":"http://yeti.cx/","github":"https://github.com/yui/yeti"},"tags":[]}},{"title":"JSCheck","url":"/library/jscheck","id":"jscheck","library":{"id":"jscheck","description":"JSCheck is a testing tool for JavaScript. It was inspired by QuickCheck, a\ntesting tool for Haskell developed by Koen Claessen and John Hughes of\nChalmers University of Technology.","logo":"/images/repo.png","name":"JSCheck","links":{"github":"https://github.com/douglascrockford/JSCheck"},"tags":[]}},{"title":"Squire.js","url":"/library/squire-js","id":"squire-js","library":{"id":"squire-js","description":"Squire.js is a dependency injector for Require.js users to make mocking dependencies easy!","logo":"/images/repo.png","name":"Squire.js","links":{"github":"https://github.com/iammerrick/Squire.js"},"tags":["mock","requirejs"]}},{"title":"Testling","url":"/library/testling","id":"testling","library":{"id":"testling","description":"Testling is automated cross-browser JavaScript testing tool. You write the JavaScript test, and we run it on all the browsers behind the scenes and report the results.","logo":"http://www.catonmat.net/images/testling.png","name":"Testling","links":{"site":"http://testling.com","github":"https://github.com/substack/testling"},"tags":[]}},{"title":"Bunyip","url":"/library/bunyip","id":"bunyip","library":{"id":"bunyip","description":"Automate client-side unit testing in real browsers using the CLI","logo":"/images/repo.png","name":"Bunyip","links":{"site":"https://ryanseddon.github.com/bunyip/","github":"https://github.com/ryanseddon/bunyip"},"tags":["unit"]}},{"title":"Screw.Unit","url":"/library/screw-unit","id":"screw-unit","library":{"id":"screw-unit","description":"Screw.Unit is a Behavior-Driven Testing Framework for Javascript. It features nested describes. Its goals are to provide:\n\na DSL for elegant, readable, organized specs;\nan interactive runner that can execute focused specs and describes;\nand brief, extensible source-code.","logo":"/images/repo.png","name":"Screw.Unit","links":{"github":"https://github.com/nkallen/screw-unit"},"tags":["bdd"]}},{"title":"YUI Test","url":"/library/yui-test","id":"yui-test","library":{"id":"yui-test","description":"YUI Test is a testing framework for browser-based JavaScript solutions. Using YUI Test, you can easily add unit testing to your JavaScript solutions. While not a direct port from any specific xUnit framework, YUI Test does derive some characteristics from nUnit and JUnit.","logo":"https://ebmedia.eventbrite.com/s3-s3/eventlogos/2254509/828699663-2.jpg","name":"YUI Test","links":{"site":"https://yuilibrary.com/yui/docs/test/","github":"https://github.com/yui/yuitest"},"tags":["unit"]}},{"title":"TypedJS","url":"/library/typedjs","id":"typedjs","library":{"id":"typedjs","description":"Basic, automatic JavaScript testing.  TypedJS will soon provide more complex forms of program specification, and analysis. The goal: safe, correct JavaScript.","logo":"/images/repo.png","name":"TypedJS","links":{"site":"http://typedjs.com","github":"https://github.com/Proxino/TypedJS"},"tags":[]}},{"title":"Pavlov","url":"/library/pavlov","id":"pavlov","library":{"id":"pavlov","description":"Behavioral API over QUnit \n\nPavlov extends JavaScript testing framework QUnit with a rich, higher-level, Behavioral API","logo":"/images/repo.png","name":"Pavlov ","links":{"site":"http://michaelmonteleone.net/projects/","github":"https://github.com/mmonteleone/pavlov"},"tags":["bdd"]}},{"title":"JsUnit","url":"/library/jsunit","id":"jsunit","library":{"id":"jsunit","description":"JsUnit is a Unit Testing framework for client-side (in-browser) JavaScript. It is essentially a port of JUnit to JavaScript. Also included is a platform for automating the execution of tests on multiple browsers and mutiple machines running different OSs.","logo":"http://www.jsunit.net/logos/logo_jsunit.gif","name":"JsUnit","links":{"github":"https://github.com/pivotal/jsunit"},"tags":["unit"]}},{"title":"Thrill","url":"/library/thrill","id":"thrill","library":{"id":"thrill","description":"Thrill runs tests in browsers.\n\nOne server captures browsers for anyone in the network to run tests on. Automatically populate the pool using Selenium Grid, Sauce Labs, or Browser Stack. Choose which browsers should run your tests based on user-agent or feature set (anything that Modernizr can detect).\n\nThrill can automatically detect and inject it's adapter during test-time for test suites using QUnit, jasmine, mocha, or YUI. This means minimal or no configuration to run your test suite.\n\nRun Thrill via the command-line, grunt, or within your own application. Use the simple API to write your own adapters and reporters. Report tests using mocha's many reporters, regardless of the testing framework you're using.","logo":"http://thrilljs.com/katana.png","name":"Thrill","links":{"site":"http://thrilljs.com","github":"https://github.com/turn/thrill"},"tags":["distributed","queen"]}},{"title":"Saga","url":"/library/saga","id":"saga","library":{"id":"saga","description":"Better code coverage tool for JavaScript","logo":"/images/repo.png","name":"Saga","links":{"site":"https://timurstrekalov.github.com/saga/","github":"https://github.com/timurstrekalov/saga"},"tags":["coverage"]}},{"title":"testr.js","url":"/library/testr-js","id":"testr-js","library":{"id":"testr-js","description":"Clean unit testing of Require.js AMD","logo":"/images/repo.png","name":"testr.js","links":{"github":"https://github.com/mattfysh/testr.js"},"tags":["amd","requirejs","unit"]}},{"title":"DalekJS","url":"/library/dalekjs","id":"dalekjs","library":{"id":"dalekjs","description":"Automated cross browser testing with JavaScript!","logo":"http://dalekjs.com/img/ee9830c8.logo.png","name":"DalekJS","links":{"site":"http://dalekjs.com/","github":"https://github.com/dalekjs/dalek"},"tags":[]}},{"title":"doctest.js","url":"/library/doctest-js","id":"doctest-js","library":{"id":"doctest-js","description":"doctest.js is a test runner for Javascript, inspired by Python's doctest.\n\nThe tests are embedded in an HTML page, and look like what Javascript might look like if you are using an interactive prompt. An example of a test (note $ is uesd as a prompt, > as a continuation prompt):","logo":"/images/repo.png","name":"doctest.js","links":{"site":"http://doctestjs.org","github":"https://github.com/ianb/doctestjs"},"tags":[]}},{"title":"Tutti","url":"/library/tutti","id":"tutti","library":{"id":"tutti","description":"Tutti - Interactively run Javascript on multiple browsers\nTutti is a web-based interactive Javascript console that allows you to simultaneously execute commands on multiple browsers. This is useful for debugging and discovering browser differences.","logo":"/images/repo.png","name":"Tutti","links":{"site":"http://tutti.tobyho.com","github":"https://github.com/airportyh/tutti"},"tags":[]}},{"title":"Hiro","url":"/library/hiro","id":"hiro","library":{"id":"hiro","description":"Hiro is a small yet powerful testing framework designed with third-party JavaScript applications in mind. It runs each test suite in a separate iframe sandbox, preventing global state leaks and conflicts.","logo":"/images/repo.png","name":"Hiro","links":{"site":"http://hirojs.com/","github":"https://github.com/antonkovalyov/hiro"},"tags":[]}},{"title":"JsMockito","url":"/library/jsmockito","id":"jsmockito","library":{"id":"jsmockito","description":"JsMockito is a JavaScript stub/mock framework heavily inspired by Mockito.\n\nJsMockito aims to try and reproduce the clean & simple API, with a JavaScript twist.","logo":"https://chrisleishman.github.com/jsmockito/jsmockito.png","name":"JsMockito","links":{"site":"http://jsmockito.org","github":"https://github.com/chrisleishman/jsmockito"},"tags":["mock"]}},{"title":"amd-testing","url":"/library/amd-testing","id":"amd-testing","library":{"id":"amd-testing","description":"testing AMD modules client and server side","logo":"https://secure.gravatar.com/avatar/238dabe9f0d4da12c85c694811bb28ce?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-user-420.png","name":"amd-testing","links":{"github":"https://github.com/geddesign/amd-testing"},"tags":[]}},{"title":"wru","url":"/library/wru","id":"wru","library":{"id":"wru","description":"wru is an essential general purpose test framework compatible with web environment, node.js, Rhino, and now PhantomJS too.","logo":"/images/repo.png","name":"wru","links":{"github":"https://github.com/WebReflection/wru"},"tags":["nodejs","phantomjs"]}},{"title":"JUTE","url":"/library/jute","id":"jute","library":{"id":"jute","description":"Javascript Unit Testing Environment (JUTE)\nJUTE is a standalone HTTP server that serves your test files to a JUTE backend for testing. Three of the four backends (Selenium, Capture, and PhantomJS) serve files to a browser, the third backend (V8) will run your tests directly in V8. JUTE then collects and stores test output in JUnit XML format and code coverage information in 'lcov' format and generates pretty HTML to view your coverage results.","logo":"/images/repo.png","name":"JUTE","links":{"github":"https://github.com/zzo/JUTE"},"tags":["unit"]}},{"title":"Quail","url":"/library/quail","id":"quail","library":{"id":"quail","description":"QUAIL is a jQuery plugin for checking content against accessibility guidelines. It provides a flexible way to test for certain problems (say, images missing an alt text) and a collection of over 200 tests to get you started. Defining your own tests is easy, and you can pick-and-choose tests to focus on the needs of your own app.","logo":"/images/repo.png","name":"Quail","links":{"github":"https://github.com/kevee/quail"},"tags":[]}},{"title":"testit","url":"/library/testit","id":"testit","library":{"id":"testit","description":"Simple js testing framework","logo":"/images/repo.png","name":"testit","links":{"site":"https://titulus.github.io/testit/","github":"https://github.com/titulus/testit"},"tags":[]}},{"title":"Spectacular","url":"/library/spectacular","id":"spectacular","library":{"id":"spectacular","description":"Spectacular is a BDD framework for CoffeeScript and JavaScript whose attempt to bring the power of RSpec to JavaScript. Spectacular tries to favor the best practices used for writing better RSpec tests in its design.","logo":"/images/repo.png","name":"Spectacular","links":{"site":"https://abe33.github.io/spectacular/","github":"https://github.com/abe33/spectacular"},"tags":["bdd","coffeescript","npm"]}},{"title":"JsUnitTest","url":"/library/jsunittest","id":"jsunittest","library":{"id":"jsunittest","description":"This JavaScript project provides a one-file JavaScript test suite.\n\nThis is based off unittest.js from \"prototypejs\":http://prototypejs.org, \nexcept this library has no dependency on prototype.js so there is no \nchance your code-under-test can conflict with prototype.js or that you might \naccidently use a prototype.js helper for a library that will be deployed \nindependently off prototypejs.","logo":"/images/repo.png","name":"JsUnitTest","links":{"site":"http://jsunittest.rubyforge.org/","github":"https://github.com/drnic/jsunittest/"},"tags":["unit"]}},{"title":"Tree","url":"/library/tree","id":"tree","library":{"id":"tree","description":"Tree.js, the Javascript Unit testing framework. (Some say it's the best one around.)\n\nTrust: It's an unittested unit testing framework. You can check out the tests in the test folder, and run them if you will. If you still manage to find a bug in spite all this effort, I'd love to pull your proposed test cases/asserts maybe along with the fixed code itself.","logo":"/images/repo.png","name":"Tree","links":{"site":"https://github.com/Wizek/Tree#readme","github":"https://github.com/Wizek/Tree"},"tags":["unit"]}},{"title":"Yadda","url":"/library/yadda","id":"yadda","library":{"id":"yadda","description":"Yadda brings true BDD to JavaScript test frameworks such as Mocha, QUnit, Nodeunit and CasperJS. By true BDD we mean that the ordinary language (e.g. English) steps are mapped to code, as opposed to merely decorating it. This is important because decorative steps such as those used by Jasmine, Mocha and Vows, can fall out of date and are a form of duplication. If your code is easily readable you they offer little benefit beyond some nice reporting.","logo":"https://0.gravatar.com/avatar/9ceca490600989805d19f5529886aed6?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"Yadda","links":{"github":"https://github.com/acuminous/yadda"},"tags":["CucumberJS","Mocha","Vows","bdd","jasmine"]}},{"title":"$expect","url":"/library/expect","id":"expect","library":{"id":"expect","description":"A DOM assertion library built on top of jQuery and based on LearnBoost's expect.js.","logo":"https://1.gravatar.com/avatar/06e224d25ac0cb9dc71ddffdd76df33b?d=https%3A%2F%2Fidenticons.github.com%2Fc9e076bb0160cfe52e2d9883656a8ec4.png","name":"$expect","links":{"github":"https://github.com/Codecademy/jquery-expect"},"tags":[]}},{"title":"unit.js","url":"/library/unit-js","id":"unit-js","library":{"id":"unit-js","description":"Unit.js is an unit testing framework for Javascript and Node.js.\n\nSeveral assertions styles (unit.js, should.js, must.js, assert, spec, ...).\n\nUnit.js is capable of testing the Node.js modules, Express.js applications, requests and it provides the great features (spies, stubs, mocks, ...). \n\nWorks standalone or with any unit testing framework (Mocha, Jasmine, ...).\n\nAll assertions are documented and and have examples.","logo":"http://unitjs.com/assets/img/unitjs.png","name":"unit.js","links":{"site":"http://unitjs.com","github":"https://github.com/unitjs/unit.js"},"tags":["mock","node.js","spy","stub","test","unit"]}},{"title":"QMock","url":"/library/qmock","id":"qmock","library":{"id":"qmock","description":"An 'expect-run-verify' JavaScript object mocking library","logo":"/images/repo.png","name":"QMock","links":{"github":"https://github.com/andybeeching/qmock"},"tags":["mock"]}},{"title":"Wish","url":"/library/wish","id":"wish","library":{"id":"wish","description":"\"Wish\" is a node assertion library without special syntax. Wish assertions give decent error messages, and your assertions are just normal javascript expressions.  For example: wish(x === true);","logo":"https://raw.github.com/EvanBurchard/wish/master/wish.png","name":"Wish","links":{"github":"https://github.com/EvanBurchard/wish"},"tags":["Node","assertion","non-commerce"]}},{"title":"munit.js","url":"/library/munit-js","id":"munit-js","library":{"id":"munit-js","description":"Microunit testing for javascript","logo":"/images/repo.png","name":"munit.js","links":{"github":"https://github.com/sole/munit.js"},"tags":["unit"]}},{"title":"JesCov","url":"/library/jescov","id":"jescov","library":{"id":"jescov","description":"JesCov is an open source tool for measuring code coverage of JavaScript. It makes it possible to find out both line and branch coverage from any ES3-compliant source code. It is not tied to any particular testing framework, but the only current integration point is for Jasmine. The general approach is based on a JSON data interchange format, which means some of the reporting tools could potentially be used against data collected in some other way than running the core JesCov project.","logo":"https://0.gravatar.com/avatar/d41d8cd98f00b204e9800998ecf8427e?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"JesCov","links":{"site":"http://jescov.olabini.com","github":"https://github.com/jescov/jescov"},"tags":["coverage"]}},{"title":"JCov","url":"/library/jcov","id":"jcov","library":{"id":"jcov","description":"Coverage reports on your Javascript tests! Supports: Jasmine, JSpec or any other Javascript with a custom runner file.","logo":"https://0.gravatar.com/avatar/f7faac7d5decc47f40fa66c2a7a97274?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"JCov","links":{"site":"https://yp-engineering.github.com/jcov/","github":"https://github.com/yp-engineering/jcov"},"tags":["coverage"]}},{"title":"bunit.js","url":"/library/bunit-js","id":"bunit-js","library":{"id":"bunit-js","description":"bunit.js provides a simple way to define unit tests and run them using a web page. In order to use it, you'll likely want to do something like this:\n\nDefine your tests (ie. tests/assert.js) using bunit and bunit.assert.\nImport your tests and bunit at your test main (ie. main.js).\nExecute your tests using bunit. It discovers the tests automatically as long as you import them via main somehow.","logo":"/images/repo.png","name":"bunit.js ","links":{"github":"https://github.com/bebraw/bunit.js"},"tags":["unit"]}},{"title":"jsassert","url":"/library/jsassert","id":"jsassert","library":{"id":"jsassert","description":"jsassert - Chaining Assert for JavaScript","logo":"/images/repo.png","name":"jsassert","links":{"github":"https://github.com/bebraw/jsassert"},"tags":[]}},{"title":"jstest","url":"/library/jstest","id":"jstest","library":{"id":"jstest","description":"jstest is a testing framework for JavaScript thatâ€™s designed to run on any platform with minimal effort. It provides a familiar RSpec-style API for organising tests that can run on the following platforms:\n\n\nWeb browsers: Chrome, Firefox, Internet Explorer, Opera, Safari\nHeadless browsers: PhantomJS, SlimerJS\nServer-side platforms: Node.js, Narwhal, RingoJS\nDatabase shells: MongoDB\nGUI environments: XULRunner, Adobe AIR\nShells: V8 shell, Rhino, SpiderMonkey, Windows Script Host","logo":"/images/repo.png","name":"jstest","links":{"github":"https://github.com/jcoglan/jstest"},"tags":[]}},{"title":"suite.js","url":"/library/suite-js","id":"suite-js","library":{"id":"suite-js","description":"suite.js - A minimalistic testing tool for Node\nsuite.js makes it easy to test various truths related to a function given to it. It comes with a several utilities that support common use cases.","logo":"/images/repo.png","name":"suite.js","links":{"github":"https://github.com/bebraw/suite.js"},"tags":[]}},{"title":"qc.js","url":"/library/qc-js","id":"qc-js","library":{"id":"qc-js","description":"QuickCheck is a fairly new testing concept that came out of the Haskell community. The goal of QuickCheck is to save time when writing unit tests.\n\nA port of the QuickCheck probabilistic unit testing concept to JavaScript","logo":"/images/repo.png","name":"qc.js","links":{"site":"http://willowbend.cx/","github":"https://github.com/urso/qc.js"},"tags":[]}},{"title":"sweet-assertions","url":"/library/sweet-assertions","id":"sweet-assertions","library":{"id":"sweet-assertions","description":"Syntax for writing informative testing assertions.\n\nThis is a set of macros for Sweet.js which extends JavaScript grammar with syntax for writing informative testing assertions. It tries to generate assertion messages which contain useful information, like 1 should be == 2 would generate 1 should be equal to 2 error message and so on.","logo":"/images/repo.png","name":"sweet-assertions","links":{"github":"https://github.com/andreypopp/sweet-assertions"},"tags":[]}},{"title":"TestCafe","url":"/library/testcafe","id":"testcafe","library":{"id":"testcafe","description":"TestCafe is a pure node.js end-to-end solution for testing web apps. It takes care of all the stages: starting browsers, running tests, gathering test results and generating reports. TestCafe doesnâ€™t need browser plugins - it works in all popular modern browsers out-of-the-box.","logo":"https://pbs.twimg.com/profile_images/378800000323895638/a17952aadb5f557c360ed9bb5ad84301_400x400.png","name":"TestCafe","links":{"site":"https://devexpress.github.io/testcafe/","github":"https://github.com/DevExpress/testcafe"},"tags":["e2e-testing","nodejs","open-source"]}},{"title":"Protractor","url":"/library/protractor","id":"protractor","library":{"id":"protractor","description":"Protractor is an end to end test framework for AngularJS applications built on top of WebDriverJS. Protractor runs tests against your application running in a real browser, interacting with it as a user would.","logo":"/images/repo.png","name":"Protractor","links":{"github":"https://github.com/angular/protractor"},"tags":[]}},{"title":"Nightwatch.js","url":"/library/nightwatch-js","id":"nightwatch-js","library":{"id":"nightwatch-js","description":"Browser automated testing done easy. Write efficient and straightforward Javascript End-to-End tests in Node.js which run against a Selenium server.","logo":"http://nightwatchjs.org/img/logo-nightwatch.png","name":"Nightwatch.js","links":{"site":"http://nightwatchjs.org/","github":"https://github.com/beatfactor/nightwatch"},"tags":[]}},{"title":"Lighttest","url":"/library/lighttest","id":"lighttest","library":{"id":"lighttest","description":"Lighttest is a JavaScript unit-testing library â€” it works both in browsers and under Node.js, supports flow control, and is focused on keeping the tests clear. This is achieved with a minimal syntax of the test cases, and the only testing function, lighttest.check(), used to indicate a success or a failure. As shown in the documentation, any testing behaviour could be implemented using that function and the native means of JavaScript. As result, one can easily understand or prepare the exact process performed by a test without a need to involve some additional testing API.","logo":"https://asvd.github.io/lighttest/logo_jster.png","name":"Lighttest","links":{"site":"https://asvd.github.io/lighttest","github":"https://github.com/asvd/lighttest"},"tags":[]}},{"title":"gremlins.js","url":"/library/gremlins-js","id":"gremlins-js","library":{"id":"gremlins-js","description":"gremlins.js is a monkey testing library written in JavaScript, for Node.js and the browser. Use it to check the robustness of web applications by unleashing a horde of undisciplined gremlins.","logo":"/images/repo.png","name":"gremlins.js","links":{"github":"https://github.com/marmelab/gremlins.js"},"tags":[]}},{"title":"qatrix","url":"/library/qatrix","id":"qatrix","library":{"id":"qatrix","description":"Easily build up high performance application with less code","logo":"/images/repo.png","name":"qatrix","links":{"site":"http://qatrix.com/"},"tags":[]}},{"title":"CatJS","url":"/library/catjs","id":"catjs","library":{"id":"catjs","description":"An open source automation framework for web and mobile-web testing by HP Software for developers who want to test their web application.","logo":"https://catjsteam.github.io/","name":"CatJS","links":{"site":"https://catjsteam.github.io/","github":"https://github.com/catjsteam/catjs"},"tags":["automation","mobile","testing","unittest"]}},{"title":"Fireunit","url":"/library/fireunit","id":"fireunit","library":{"id":"fireunit","description":"Fireunit brings a new Test panel that displays list of results from executed tests. Each entry is expandable so, some additional info about particular message can be discovered.\n\nSince Fireunit's APIs allow to compare expected and actual state of the UI (HTML in most cases), there can be even additional info tab displaying if the message comes from this kind of test.","logo":"/images/repo.png","name":"Fireunit","links":{"site":"http://fireunit.org/"},"tags":[]}},{"title":"jsUnity","url":"/library/jsunity","id":"jsunity","library":{"id":"jsunity","description":"jsUnity is a lightweight, environment-agnostic JavaScript testing framework: It doesnâ€™t rely on any browser capabilities and therefore can be used in any client-side or server-side JavaScript environment.","logo":"https://viewvc.svn.mozilla.org/vc/projects/openweb/trunk/webroot/thumbs/jsunity.png?revision=30252&view=co&pathrev=30252","name":"jsUnity","links":{"site":"http://jsunity.com/"},"tags":["unit"]}},{"title":"JasUnit","url":"/library/jasunit","id":"jasunit","library":{"id":"jasunit","description":"JasUnit is a slim unit testing framework for JavaScript, following the general design principles of xUnit.\n\nFor testing your code, JasUnit allows you to:\n\nCreate test fixtures with any number of test methods\nImplement setup() and teardown() methods which are run before and after each test\nSpecify a namespace for a fixture for easy organisation of tests\nUse the default or custom logger (default appends results to a given element)\nUse assertions from any scope - this isn't necessary or even really advised, but some people prefer it.","logo":"/images/repo.png","name":"JasUnit","links":{"site":"https://code.google.com/p/jasproject/wiki/JasUnit"},"tags":["unit"]}},{"title":"RhinoUnit","url":"/library/rhinounit","id":"rhinounit","library":{"id":"rhinounit","description":"Ant Based Javascript Testing Framework in its original form RhinoUnit is run from an ANT scriptdef task using the Rhino engine - and uses all the helpful things that ANT provides for that. It is intended, however, that in the future the framework can be reused in other forms.","logo":"/images/repo.png","name":"RhinoUnit","links":{"site":"https://code.google.com/p/rhinounit/"},"tags":["ant"]}},{"title":"J3Unit","url":"/library/j3unit","id":"j3unit","library":{"id":"j3unit","description":"J3Unit is an object-oriented unit testing framework for JavaScript. J3Unit runs JavaScript tests directly in the web browser and can be automated using JUnit and Jetty. J3Unit builds on previous work by JSUnit and Script.aculo.us to provide a better way to automate JavaScript unit tests. Object-oriented JavaScript unit tests are written using the Script.aculo.us Test.Unit.Runner object, which is in turn built upon the prototype JavaScript library.","logo":"http://j3unit.sourceforge.net/j3unit.jpg","name":"J3Unit","links":{"site":"http://j3unit.sourceforge.net/"},"tags":["unit"]}},{"title":"JSNUnit","url":"/library/jsnunit","id":"jsnunit","library":{"id":"jsnunit","description":"JavaScript Client and ASP .NET Server Testing Framework","logo":"/images/repo.png","name":"JSNUnit","links":{"site":"http://www.valleyhighlands.com/testingframeworks/JSNUnit/"},"tags":["asp.net"]}},{"title":"Chutzpah","url":"/library/chutzpah","id":"chutzpah","library":{"id":"chutzpah","description":"Chutzpah is an open source JavaScript test runner which helps you integrate JavaScript unit testing into your website. It enables you to run JavaScript unit tests from the command line and from inside of Visual Studio. It also supports running in the TeamCity continuous integration server.","logo":"https://download-codeplex.sec.s-msft.com/Download?ProjectName=chutzpah&DownloadId=250747&Build=19383","name":"Chutzpah ","links":{"site":"https://chutzpah.codeplex.com/"},"tags":[]}},{"title":"JSSpec","url":"/library/jsspec","id":"jsspec","library":{"id":"jsspec","description":"JSSpec is a Javascript BDD(Behavior Driven Development) framework.","logo":"/images/repo.png","name":"JSSpec","links":{"site":"https://code.google.com/p/jsspec/"},"tags":["bdd"]}},{"title":"JSMock","url":"/library/jsmock","id":"jsmock","library":{"id":"jsmock","description":"JSMock is a fully featured Mock Object library for JavaScript that provides the necessary tools to do effective interactive based testing.\n\nJSMock provides expectation recording and matching, and has the ability to return, throw, and stub on object method calls. The interface is simple and easy to use, which makes testing easy.","logo":"/images/repo.png","name":"JSMock","links":{"site":"http://jsmock.sourceforge.net/"},"tags":["mock"]}},{"title":"MockMe","url":"/library/mockme","id":"mockme","library":{"id":"mockme","description":"Mock frameworks for JavaScript","logo":"/images/repo.png","name":"MockMe","links":{"site":"http://johanneslink.net/projects/mockme.html"},"tags":["mock"]}},{"title":"Crawljax","url":"/library/crawljax","id":"crawljax","library":{"id":"crawljax","description":"Crawljax is an open source Java tool for automatically crawling and testing modern (Ajax) web applications.","logo":"/images/repo.png","name":"Crawljax","links":{"site":"http://crawljax.com/"},"tags":["java"]}},{"title":"JSCoverage","url":"/library/jscoverage","id":"jscoverage","library":{"id":"jscoverage","description":"JSCoverage is a tool that measures code coverage for JavaScript programs.","logo":"/images/repo.png","name":"JSCoverage","links":{"site":"http://siliconforks.com/jscoverage/"},"tags":["coverage"]}},{"title":"ScriptCover","url":"/library/scriptcover","id":"scriptcover","library":{"id":"scriptcover","description":"ScriptCover is a javascript coverage analysis tool. It is a Chrome extension that provides line-by-line Javascript code coverage statistics for web pages in real time without any user modifications required. The results are collected both when the page loads and as users interact with it. The tool reports details about total web page coverage and for each external/internal script, as well as annotated code sources with individually highlighted executed lines.","logo":"/images/repo.png","name":"ScriptCover ","links":{"site":"https://googletesting.blogspot.com/2011/10/scriptcover-makes-javascript-coverage.html"},"tags":["chrome","coverage"]}},{"title":"myjs","url":"/library/myjs","id":"myjs","library":{"id":"myjs","description":"myjs","logo":"/images/repo.png","name":"myjs","links":{},"tags":[]}},{"title":"testium","url":"/library/testium","id":"testium","library":{"id":"testium","description":"Testium is a testing platform focused on providing a simple, but effective, platform for testing your code in different browsers (via Selenium) and headlessly (via PhantomJS). It uses webdriver-http-sync in order to communicate using the WebDriver protocol to a selenium server.","logo":"/images/repo.png","name":"testium","links":{"github":"https://github.com/groupon/testium"},"tags":[]}},{"title":"testardo","url":"/library/testardo","id":"testardo","library":{"id":"testardo","description":"A browser and OS agnostic web driver for mobile and desktop.","logo":"/images/repo.png","name":"testardo","links":{"github":"https://github.com/WebReflection/testardo"},"tags":[]}}]