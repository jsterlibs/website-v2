[{"title":"Physijs","url":"/library/physijs","id":"physijs","library":{"id":"physijs","description":"Physics plugin for three.js\nPhysijs brings a very easy to use interface to the three.js framework. One of the reasons three.js is so popular is because it is so incredibly easy for graphics newbies to get into 3D programming. Physijs takes that philosophy to heart and makes physics simulations just as easy to run. In fact, there are just five easy steps that must be taken to make a 3D scene come alive.","logo":"/images/repo.png","name":"Physijs","links":{"github":"https://github.com/chandlerprall/Physijs"},"tags":[]}},{"title":"cannon.js","url":"/library/cannon-js","id":"cannon-js","library":{"id":"cannon-js","description":"Lightweight 3D physics for the web\n\nInspired by three.js and ammo.js, and driven by the fact that the web lacks a physics engine, here comes cannon.js.","logo":"/images/repo.png","name":"cannon.js","links":{"site":"https://schteppe.github.com/cannon.js","github":"https://github.com/schteppe/cannon.js"},"tags":["3d"]}},{"title":"PhysicsJS","url":"/library/physicsjs","id":"physicsjs","library":{"id":"physicsjs","description":"A modular, extendable, and easy-to-use physics engine for javascript.","logo":"/images/repo.png","name":"PhysicsJS","links":{"site":"http://wellcaffeinated.net/PhysicsJS/","github":"https://github.com/wellcaffeinated/PhysicsJS"},"tags":[]}},{"title":"ammo.js","url":"/library/ammo-js","id":"ammo-js","library":{"id":"ammo-js","description":"ammo.js is a direct port of the Bullet physics engine to JavaScript, using Emscripten. The source code is translated directly to JavaScript, without human rewriting, so functionality should be identical to the original Bullet.\n\n'ammo' stands for \"Avoided Making My Own js physics engine by compiling bullet from C++\" ;)\n\nammo.js is zlib licensed, just like Bullet.","logo":"/images/repo.png","name":"ammo.js","links":{"github":"https://github.com/kripken/ammo.js"},"tags":[]}},{"title":"Coffee-Physics","url":"/library/coffee-physics","id":"coffee-physics","library":{"id":"coffee-physics","description":"A lightweight physics engine, written in CoffeeScript.","logo":"/images/repo.png","name":"Coffee-Physics","links":{"github":"https://github.com/soulwire/Coffee-Physics"},"tags":["coffeescript"]}},{"title":"Newton","url":"/library/newton","id":"newton","library":{"id":"newton","description":"An easy-to-use, feature-rich physics engine that's designed from the ground up for JavaScript.","logo":"/images/repo.png","name":"Newton","links":{"github":"https://github.com/hunterloftis/newton"},"tags":["physics"]}},{"title":"Chipmunk-js","url":"/library/chipmunk-js","id":"chipmunk-js","library":{"id":"chipmunk-js","description":"This is a port of the Chipmunk Physics library to Javascript!\n\nCaveats\nIt is slower than the C version (duh, its in javascript). Specifically, physics simulations using chipmunk-js runs about 3 times slower than the C equivalent.\nI haven't implemented chipmunk's spatial hash, and I have no intention to do so.","logo":"/images/repo.png","name":"Chipmunk-js ","links":{"site":"https://dl.dropbox.com/u/2494815/demo/Joints.html","github":"https://github.com/josephg/Chipmunk-js"},"tags":[]}},{"title":"box2dweb","url":"/library/box2dweb","id":"box2dweb","library":{"id":"box2dweb","description":"This is a port of Box2DFlash 2.1a to JavaScript.\n\nThere already exists a port to JavaScript called Box2dJs, but it's not up-to-date and you have to import a big amount of JavaScript files in every project, whereas this version is stored in a single file.","logo":"https://code.google.com/p/box2dweb/logo?cct=1293365922","name":"box2dweb","links":{"site":"https://thinkpixellab.github.io/pl/","github":"https://github.com/thinkpixellab/pl"},"tags":[]}},{"title":"JigLibJS","url":"/library/jiglibjs","id":"jiglibjs","library":{"id":"jiglibjs","description":"JigLib port for javascript","logo":"/images/repo.png","name":"JigLibJS","links":{"github":"https://github.com/supereggbert/JigLibJS"},"tags":[]}},{"title":"microphysics.js","url":"/library/microphysics-js","id":"microphysics-js","library":{"id":"microphysics-js","description":"microphysics.js is a micro library implementing 3D physics.","logo":"/images/repo.png","name":"microphysics.js","links":{"site":"http://learningthreejs.com/blog/2011/10/17/lets-make-a-3d-game-microphysics-js/","github":"https://github.com/jeromeetienne/microphysics.js"},"tags":[]}},{"title":"Matter.js","url":"/library/matter-js","id":"matter-js","library":{"id":"matter-js","description":"Matter.js is a 2D rigid body physics engine for the web written in JavaScript","logo":"/images/repo.png","name":"Matter.js","links":{"site":"http://brm.io/matter-js/","github":"https://github.com/liabru/matter-js"},"tags":["body","engine","game","physics","rigid"]}},{"title":"JavaScript-Physics-Library","url":"/library/javascript-physics-library","id":"javascript-physics-library","library":{"id":"javascript-physics-library","description":"JavaScript-Physics-Library","logo":"/images/repo.png","name":"JavaScript-Physics-Library","links":{"site":"http://This is an open source JavaScript Physics library that can use scriptaculous effects and draw lines. Have a look at the documentation or my blog post http://www.christophpacher.com/blog/javascript-physics-library/ for a feature list.","github":"https://github.com/ChristophPacher/JavaScript-Physics-Library"},"tags":[]}},{"title":"Oimo.js","url":"/library/oimo-js","id":"oimo-js","library":{"id":"oimo-js","description":"Oimo.js is a lightweight 3d physics engine for javascript.","logo":"/images/repo.png","name":"Oimo.js","links":{"site":"https://lo-th.github.io/Oimo.js/index.html","github":"https://github.com/lo-th/Oimo.js"},"tags":[]}},{"title":"Goblin Physics","url":"/library/goblin-physics","id":"goblin-physics","library":{"id":"goblin-physics","description":"Goblin Physics is an open source physics engine written from the ground up for JavaScript games and applications. It's goal is to provide fast and dependable physics simulation regardless of platform (desktop or mobile, browser or nodejs).","logo":"/images/repo.png","name":"Goblin Physics","links":{"site":"http://www.goblinphysics.com","github":"https://github.com/chandlerprall/GoblinPhysics"},"tags":[]}},{"title":"bulletjs","url":"/library/bulletjs","id":"bulletjs","library":{"id":"bulletjs","description":"A Javascript physics engine.\nPort of parts of the Java library JBullet","logo":"/images/repo.png","name":"bulletjs","links":{"site":"https://code.google.com/p/bulletjs/"},"tags":[]}},{"title":"Blob Sallad","url":"/library/blob-sallad","id":"blob-sallad","library":{"id":"blob-sallad","description":"Blob Sallad â€“ canvas tag and JavaScript physics simulation experiment\n\nBlob Sallad is a small demo I put together using the canvas tag, which modern browsers have started to support in recent versions (eg Opera 9.x and Firefox 2.x,) and some JavaScript physics simulation. The main inspiration was the game Loco Rocco, and after reading an article about game character physics by Thomas Jacobsen. I decided I could use similar techniques for blob simulation.\nYou can download the source code to play around with at http://blobsallad.se/blobsallad.js.","logo":"/images/repo.png","name":"Blob Sallad","links":{"site":"http://blobsallad.se/"},"tags":[]}},{"title":"PhysJ","url":"/library/physj","id":"physj","library":{"id":"physj","description":"PhysJ: Physics Engine Javascript","logo":"/images/repo.png","name":"PhysJ","links":{"site":"http://cvslab.di.unipi.it/blogs/simula/"},"tags":[]}},{"title":"verlet-js","url":"/library/verlet-js","id":"verlet-js","library":{"id":"verlet-js","description":"A simple Verlet (pronounced 'ver-ley') physics engine written in javascript.\n\nParticles, distance constraints, and angular constraints are all supported by verlet-js. From these primitives it is possible to construct just about anything you can imagine.","logo":"/images/repo.png","name":"verlet-js","links":{"github":"https://github.com/subprotocol/verlet-js"},"tags":[]}},{"title":"p2.js","url":"/library/p2-js","id":"p2-js","library":{"id":"p2-js","description":"2D rigid body physics engine written in JavaScript. Includes collision detection, contacts, friction, restitution, motors, springs, advanced constraints and various shape types.","logo":"/images/repo.png","name":"p2.js","links":{"site":"https://schteppe.github.io/p2.js/","github":"https://github.com/schteppe/p2.js"},"tags":[]}}]