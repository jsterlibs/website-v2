[{"title":"Jade","url":"/library/jade","id":"jade","library":{"id":"jade","description":"Jade - template engine\nJade is a high performance template engine heavily influenced by Haml and implemented with JavaScript for node. For discussion join the Google Group.","logo":"http://i1-scripts.softpedia-static.com/thumbnails/Jade-Template-Engine-thumb.png","name":"Jade","links":{"site":"http://jade-lang.com","github":"https://github.com/visionmedia/jade"},"tags":[]}},{"title":"mustache.js","url":"/library/mustache-js","id":"mustache-js","library":{"id":"mustache-js","description":"mustache.js is an implementation of the mustache template system in JavaScript.\n\nMustache is a logic-less template syntax. It can be used for HTML, config files, source code - anything. It works by expanding tags in a template using values provided in a hash or object.\n\nWe call it \"logic-less\" because there are no if statements, else clauses, or for loops. Instead there are only tags. Some tags are replaced with a value, some nothing, and others a series of values.","logo":"http://i1-scripts.softpedia-static.com/thumbnails/mustache-js-thumb.png?1347735241","name":"mustache.js","links":{"site":"https://mustache.github.com/","github":"https://github.com/janl/mustache.js"},"tags":[]}},{"title":"Handlebars","url":"/library/handlebars-p","id":"handlebars-p","library":{"id":"handlebars-p","description":"Handlebars provides the power necessary to let you build semantic templates effectively with no frustration.\nMustache templates are compatible with Handlebars, so you can take a Mustache template, import it into Handlebars, and start taking advantage of the extra Handlebars features.","logo":"http://handlebarsjs.com/images/handlebars_logo.png","name":"Handlebars","links":{"site":"http://handlebarsjs.com","github":"https://github.com/wycats/handlebars.js/"},"tags":[]}},{"title":"Hogan.js","url":"/library/hogan-js","id":"hogan-js","library":{"id":"hogan-js","description":"Hogan.js is a 2.5k JS templating engine developed at Twitter. Use it as a part of your asset packager to compile templates ahead of time or include it in your browser to handle dynamic templates.","logo":"http://www.devzone.fr/wp-content/uploads/hogan-js.png","name":"Hogan.js","links":{"site":"https://twitter.github.com/hogan.js","github":"https://github.com/twitter/hogan.js"},"tags":[]}},{"title":"dustjs","url":"/library/dustjs","id":"dustjs","library":{"id":"dustjs","description":"Asynchronous templates for the browser and node.js","logo":"https://0.gravatar.com/avatar/344449f21a57e790db8361d7970b731a?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"dustjs","links":{"site":"http://dustjs.com","github":"https://github.com/linkedin/dustjs"},"tags":[]}},{"title":"JsRender","url":"/library/jsrender","id":"jsrender","library":{"id":"jsrender","description":"Next-generation jQuery Templates, optimized for high-performance pure string-based rendering, without DOM or jQuery dependency.","logo":"http://www.jsviews.com/resources/images/logo-jsr.png","name":"JsRender","links":{"site":"http://www.jsviews.com/#jsrender","github":"https://github.com/BorisMoore/jsrender"},"tags":[]}},{"title":"doT.js","url":"/library/dot-js","id":"dot-js","library":{"id":"dot-js","description":"The fastest + concise javascript template engine\nfor Node.js and browsers.","logo":"/images/repo.png","name":"doT.js","links":{"github":"https://github.com/olado/doT"},"tags":[]}},{"title":"Eco","url":"/library/eco","id":"eco","library":{"id":"eco","description":"Eco: Embedded CoffeeScript templates\nEco lets you embed CoffeeScript logic in your markup. It's like EJS and ERB, but with CoffeeScript inside the <% ... %>. Use it from Node.js to render your application's views on the server side, or compile your templates to JavaScript with the eco command-line utility and use them to dynamically render views in the browser.","logo":"/images/repo.png","name":"Eco","links":{"github":"https://github.com/sstephenson/eco"},"tags":[]}},{"title":"Transparency","url":"/library/transparency","id":"transparency","library":{"id":"transparency","description":"Transparency is a minimal template engine for the browser. It maps JSON objects to DOM elements with zero configuration.","logo":"https://0.gravatar.com/avatar/a103ad5d1f25b3ad2abc021de34f6dce?d=https://a248.e.akamai.net/assets.github.com%2Fimages%2Fgravatars%2Fgravatar-org-420.png","name":"Transparency","links":{"site":"https://leonidas.github.com/transparency/","github":"https://github.com/leonidas/transparency"},"tags":[]}},{"title":"t.js","url":"/library/t-js","id":"t-js","library":{"id":"t-js","description":"A tiny javascript templating framework in ~400 bytes gzipped\nt.js is a simple solution to interpolating values in an html string for insertion into the DOM via","logo":"/images/repo.png","name":"t.js","links":{"github":"https://github.com/jasonmoo/t.js"},"tags":[]}},{"title":"JavaScript-Templates","url":"/library/javascript-templates","id":"javascript-templates","library":{"id":"javascript-templates","description":"< 1KB lightweight, fast & powerful JavaScript templating engine with zero dependencies. Compatible with server-side environments like node.js, module loaders like RequireJS and all web browsers.","logo":"/images/repo.png","name":"JavaScript-Templates","links":{"site":"https://blueimp.github.io/JavaScript-Templates/","github":"https://github.com/blueimp/JavaScript-Templates"},"tags":["Template","javascript","lightweight","templating"]}},{"title":"Pure","url":"/library/pure","id":"pure","library":{"id":"pure","description":"Pure is a simple and ultra-fast templating tool to generate HTML from JSON data. This way it is similar to Transparency for instance.","logo":"/images/repo.png","name":"Pure","links":{"site":"http://beebole.com/pure","github":"https://github.com/pure/pure"},"tags":[]}},{"title":"Weld","url":"/library/weld","id":"weld","library":{"id":"weld","description":"Weld binds data to markup, and can generate markup based on your data. There's NO special syntax or data reshaping required. It works in the browser and in node.js! Weld is currently 3.66Kb uglified with no dependencies other than a valid DOM. Weld will apply values to elements the way that elements expect to have their values set.","logo":"https://github.com/hij1nx/weld/raw/master/documentation-assets/github-header.png","name":"Weld","links":{"github":"https://github.com/hij1nx/weld"},"tags":[]}},{"title":"Twig.js","url":"/library/twig-js","id":"twig-js","library":{"id":"twig-js","description":"JS implementation of the Twig Templating Library","logo":"/images/repo.png","name":"Twig.js","links":{"github":"https://github.com/justjohn/twig.js"},"tags":[]}},{"title":"Qote2","url":"/library/qote2","id":"qote2","library":{"id":"qote2","description":"Qote2 is the second major release of jQuery’s most powerful and versatile client-side templating engine. Version 2 now incorporates a faster and more accurate parsing/conversion part that does away with its predecessor’s shortcomings in escaping quotes and multiline support.","logo":"/images/repo.png","name":"Qote2","links":{"site":"http://aefxx.com","github":"https://github.com/aefxx/jQote2"},"tags":[]}},{"title":"ICanHaz.js","url":"/library/icanhaz-js","id":"icanhaz-js","library":{"id":"icanhaz-js","description":"Simple & powerful client-side templating\nA clean solution for templating with Mustache.js and jQuery or Zepto","logo":"http://i1-scripts.softpedia-static.com/thumbnails/ICanHaz-js-thumb.png","name":"ICanHaz.js","links":{"site":"http://icanhazjs.com","github":"https://github.com/andyet/ICanHaz.js"},"tags":[]}},{"title":"ECT","url":"/library/ect","id":"ect","library":{"id":"ect","description":"Fastest JavaScript template engine with embedded CoffeeScript syntax. ECT can runs on server-side with Node.JS and client-side with all modern browsers.","logo":"/images/repo.png","name":"ECT","links":{"site":"http://ectjs.com","github":"https://github.com/baryshev/ect"},"tags":[]}},{"title":"grips","url":"/library/grips","id":"grips","library":{"id":"grips","description":"simple-logic templates","logo":"/images/repo.png","name":"grips","links":{"site":"https://getify.github.com/grips/","github":"https://github.com/getify/grips"},"tags":["javascript","templates","templating"]}},{"title":"MaskJS","url":"/library/maskjs","id":"maskjs","library":{"id":"maskjs","description":"Template-HMVC Engine. Fast and Beautiful. Features: Fast, Dzen Coding, Custom Tag Handlers. Custom Model Data Handlers. Dualbindings. Browser and Node.js","logo":"http://atmajs.com/images/logos/mask.png","name":"MaskJS","links":{"site":"http://atmajs.com/mask","github":"https://github.com/atma/MaskJS"},"tags":[]}},{"title":"Architect","url":"/library/architect","id":"architect","library":{"id":"architect","description":"Architect - Javascript Template Editor\nWeb app for editing Javascript templates in various engines.","logo":"/images/repo.png","name":"Architect","links":{"site":"https://rowno.github.io/architect/","github":"https://github.com/Rowno/architect"},"tags":[]}},{"title":"JUST","url":"/library/just","id":"just","library":{"id":"just","description":"JavaScript template engine.\nCaching templates\nAutomatic reloading of changed templates\nJavaScript code in templates\nSupports tag customization\nNode.JS and client-side support\nPowerful but simple syntax\nInheritance, partials, blocks","logo":"/images/repo.png","name":"JUST","links":{"github":"https://github.com/baryshev/just"},"tags":[]}},{"title":"rafaelkyrdan/DOMBuilder","url":"/library/dombuilder-from-rk","id":"dombuilder-from-rk","library":{"id":"dombuilder-from-rk","description":"DOMBuilder\nIt is template mechanism, which creates DOM elements. It doesn't uses concatenating strings.","logo":"/images/repo.png","name":"rafaelkyrdan/DOMBuilder","links":{"github":"https://github.com/rafaelkyrdan/DOMBuilder"},"tags":["dom"]}},{"title":"Thulium","url":"/library/thulium","id":"thulium","library":{"id":"thulium","description":"Thulium (Tm) is a templating engine written in javascript. It's based on EJS, but attempts to solve several problems with it: It formalizes the syntax, makes it fast and attempts to make it more debuggable.\n\nThis was a result of the EJS implementation being in dire need of performance, specification and debuggability. It works on the browser and in your server!","logo":"https://freshout-dev.github.io/thulium/img/tm.png","name":"Thulium","links":{"github":"https://github.com/freshout-dev/thulium"},"tags":[]}},{"title":"Templ8","url":"/library/templ8","id":"templ8","library":{"id":"templ8","description":"Templ8 as you can probably guess is a JavaScript template engine, with a Django'ish style of syntax.\n\nIt's fast, light weight and unlike a lot of other JavaScript template engines: Templ8 does not use the JavaScript with statement. This actually makes Templ8 parse templates faster than it would if it did use the with statement!\n\nTempl8 does not restrict you to generating HTML. All outputs are strings so if you want to generate HTML, CSS, JavaScript or whatever, the choice is yours...","logo":"/images/repo.png","name":"Templ8","links":{"github":"https://github.com/constantology/Templ8"},"tags":[]}},{"title":"EJS","url":"/library/ejs","id":"ejs","library":{"id":"ejs","description":"An open source JavaScript Template library\nEJS cleans the HTML out of your JavaScript with client side templates. After EJS gets its rubber gloves on dirty code, you'll feel organized and uncluttered.","logo":"/images/repo.png","name":"EJS","links":{"site":"http://embeddedjs.com/"},"tags":[]}},{"title":"gloomy.js","url":"/library/gloomy-js","id":"gloomy-js","library":{"id":"gloomy-js","description":"A simple and semantic substitution template engine for the browser.","logo":"/images/repo.png","name":"gloomy.js","links":{"site":"https://pazguille.github.io/gloomy/","github":"https://github.com/pazguille/gloomy"},"tags":["Template"]}},{"title":"ist.js","url":"/library/ist-js","id":"ist-js","library":{"id":"ist-js","description":"IST is a javascript DOM templating engine using a CSS selector-like syntax. It supports custom directives (much like Handlebars block helpers) and handles arbitrary JS expressions inside templates.","logo":"/images/repo.png","name":"ist.js","links":{"site":"https://njoyard.github.com/ist/","github":"https://github.com/njoyard/ist"},"tags":["amd","css","dom"]}},{"title":"_Template","url":"/library/template","id":"template","library":{"id":"template","description":"Fork of underscorejs that only has templating functionality. It's a mere 1kb! It's practically unmodified, with the exception of how the template settings work.\n\nFor a simple demo, see index.html\n\nFor more verbose documentation, visit http://underscorejs.org/#template","logo":"/images/repo.png","name":"_Template","links":{"site":"http://underscorejs.org/#template","github":"https://github.com/positlabs/_Template"},"tags":[]}},{"title":"Nunjucks","url":"/library/nunjucks","id":"nunjucks","library":{"id":"nunjucks","description":"Nunjucks is a full featured templating engine for javascript. It is heavily inspired by jinja2.","logo":"/images/repo.png","name":"Nunjucks","links":{"site":"https://jlongster.github.io/nunjucks/","github":"https://github.com/mozilla/nunjucks"},"tags":[]}},{"title":"Raptor Templates","url":"/library/raptor-templates","id":"raptor-templates","library":{"id":"raptor-templates","description":"Raptor Templates is an extensible, streaming, asynchronous, high performance, HTML-based templating language that can be used in Node.js or in the browser. Raptor Templates was founded on the philosophy that an HTML-based templating language is more natural and intuitive for generating HTML. Because the Raptor Templates compiler understands the structure of the HTML document, the directives in template files are less obtrusive and more powerful. In addition, Raptor Templates allows you to introduce your own custom tags and custom attributes to extend the HTML grammar.","logo":"https://raw.githubusercontent.com/raptorjs/branding/master/raptorjs-logo-square.png","name":"Raptor Templates","links":{"github":"https://github.com/raptorjs3/raptor-templates"},"tags":["asynchronous","custom-tags","html","non-commerce","streaming"]}},{"title":"Soma-Template","url":"/library/soma-template","id":"soma-template","library":{"id":"soma-template","description":"soma-template is lightweight : 6.8 KB. It is tested and works in all modern browsers and in Internet Explorer from version 7 to 10. Its performance will be directly related to the DOM manipulation performance of the browser itself. This is why today the library is very fast on Google Chrome, which I recommend.","logo":"/images/repo.png","name":"Soma-Template","links":{"site":"https://soundstep.github.io/soma-template/","github":"https://github.com/soundstep/soma-template"},"tags":[]}},{"title":"teddy","url":"/library/teddy","id":"teddy","library":{"id":"teddy","description":"Teddy is an easy-to-read, HTML-based, mostly logic-less DOM templating engine with support for both server-side and client-side templating.","logo":"/images/repo.png","name":"teddy","links":{"github":"https://github.com/kethinov/teddy"},"tags":[]}},{"title":"Marko","url":"/library/marko","id":"marko","library":{"id":"marko","description":"Marko is an extensible, streaming, asynchronous, high performance, HTML-based templating language that can be used in Node.js or in the browser. Marko was founded on the philosophy that an HTML-based templating language is more natural and intuitive for generating HTML. Because the Marko compiler understands the structure of the HTML document, the directives in template files are less obtrusive and more powerful. In addition, Marko allows you to introduce your own custom tags and custom attributes to extend the HTML grammar (much like Web Components—only you can use it now).","logo":"https://raw.githubusercontent.com/raptorjs3/branding/master/raptorjs-logo-square.png","name":"Marko","links":{"site":"https://github.com/raptorjs3/marko","github":"https://github.com/raptorjs3/marko"},"tags":["asynchronous","streaming"]}},{"title":"PaperclipJS","url":"/library/paperclipjs","id":"paperclipjs","library":{"id":"paperclipjs","description":"Paperclip is a simple, yet powerful reactive template engine built for speed, and extensibility.  It works by compiling templates to document fragments, then clones them whenever they're needed. The result is blazing-fast rendering with very few moving parts.","logo":"/images/repo.png","name":"PaperclipJS","links":{"site":"http://paperclipjs.com","github":"https://github.com/mojo-js/paperclip.js"},"tags":["Template","dom","reactive"]}}]